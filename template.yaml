AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Escola de software - Usuarios - Api Gateway
Parameters:
  Environment:
    Description: Environment
    Type: String
Resources:
  UsuariosApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "Escola de Software - Usuarios - Api Gateway - ${Environment}"
      Description: !Sub "Escola de Software - Usuarios - Api Gateway - ${Environment}"
      EndpointConfiguration:
        Types:
          - REGIONAL
      FailOnWarnings: False
      Mode: overwrite

  UsuariosApiGatewayUsuariosResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref UsuariosApiGateway
      ParentId: !GetAtt
        - UsuariosApiGateway
        - RootResourceId
      PathPart: "usuarios"

  UsuariosApiGatewayUsuariosPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ApiKeyRequired: False
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 500
        TimeoutInMillis: 2000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-usuarios-lambdacriarusuariofn/invocations"
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      OperationName: POST /usuarios
      ResourceId: !Ref UsuariosApiGatewayUsuariosResource
      RestApiId: !Ref UsuariosApiGateway

  UsuariosApiGatewayUsuariosPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaCustomAuthorizer
      ApiKeyRequired: False
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 500
        TimeoutInMillis: 3000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-usuarios-lambdaatualizarusuariofn/invocations"
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      OperationName: PUT /usuarios
      ResourceId: !Ref UsuariosApiGatewayUsuariosResource
      RestApiId: !Ref UsuariosApiGateway

  UsuariosApiGatewayUsuariosGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaCustomAuthorizer
      ApiKeyRequired: False
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
          - StatusCode: 500
        TimeoutInMillis: 3000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-usuarios-lambdaconsultausuariofn/invocations"
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      OperationName: GET /usuarios
      ResourceId: !Ref UsuariosApiGatewayUsuariosResource
      RestApiId: !Ref UsuariosApiGateway

  UsuariosApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: UsuariosApiGatewayUsuariosResource
    Properties:
      RestApiId: !Ref UsuariosApiGateway
      Description: !Ref Environment
      StageName: !Ref Environment

  #########  Permissions #########
  UsuariosInvokeLambdaCriarUsuariosBasedPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-usuarios-lambdacriarusuariofn"
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn:
        Fn::Join:
          [
            "",
            [
              "arn:",
              !Ref AWS::Partition,
              ":execute-api:",
              !Ref AWS::Region,
              ":",
              !Ref AWS::AccountId,
              ":",
              !Ref UsuariosApiGateway,
              "/*/POST/usuarios"
            ],
          ]

  UsuariosInvokeLambdaAtualizarUsuariosBasedPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-usuarios-lambdaatualizarusuariofn"
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn:
        Fn::Join:
          [
            "",
            [
              "arn:",
              !Ref AWS::Partition,
              ":execute-api:",
              !Ref AWS::Region,
              ":",
              !Ref AWS::AccountId,
              ":",
              !Ref UsuariosApiGateway,
              "/*/PUT/usuarios",
            ],
          ]

  UsuariosInvokeLambdaConsultarUsuariosBasedPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-usuarios-lambdaconsultausuariofn"
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn:
        Fn::Join:
          [
            "",
            [
              "arn:",
              !Ref AWS::Partition,
              ":execute-api:",
              !Ref AWS::Region,
              ":",
              !Ref AWS::AccountId,
              ":",
              !Ref UsuariosApiGateway,
              "/*/GET/usuarios",
            ],
          ]

  #########  Autorizador #########
  LambdaCustomAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: '0'
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-autorizador-lambdaauthorizerfn/invocations"
      Type: TOKEN
      IdentitySource: method.request.header.Authorization
      Name: DefaultLambdaAuthorizer
      RestApiId: !Ref UsuariosApiGateway

  InvokeLambdaAuthorizerBasedPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}_escoladesoftware-autorizador-lambdaauthorizerfn"
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn:
        Fn::Join:
          [
            "",
            [
              "arn:",
              !Ref AWS::Partition,
              ":execute-api:",
              !Ref AWS::Region,
              ":",
              !Ref AWS::AccountId,
              ":",
              !Ref UsuariosApiGateway,
              "/authorizers/",
              !Ref LambdaCustomAuthorizer
            ],
          ]